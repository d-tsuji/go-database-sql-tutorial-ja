==================================
コネクションプール
==================================

----------------------------------

``database/sql`` パッケージには基本的なコネクションプールがあります。制御したり検査したりするための多くの機能はありませんが、知っておくと便利なことがあります。

- コネクションプーリングとは、単一のデータベースに2つの連続するステートメントを実行するときに、2つのコネクションが開かれ、独立して実行されることになります。プログラマにとって、コードが誤作動する理由に混乱することはよくあることです。例えば ``INSERT`` は テーブルへのロックを取得しないコネクション上にあるため ``LOCK TABLES`` に続いて ``INSERT`` をブロックできます。
- コネクションは必要なときに生成され、プールには自由な(free)コネクションはありません。
- デフォルトではコネクションの数に制限はありません。一度に多くのことをしようとすると任意の数のコネクションを生成することができます。ただしデータベースは "接続が多すぎます" などのエラーを返すことがあります。
- Go1.1以降では、``db.SetMaxIdleConns(N)`` を使用して、プール内のアイドルコネクションの数を制限できます。ただし、これはプールサイズを制限しません。
- Go1.2.1以降では、データベースへのOpenしている合計のコネクション数を制限するために ``db.SetMaxIdleConns(N)`` を使うことができます。残念なことに `デッドロックのバグ <https://groups.google.com/d/msg/golang-dev/jOTqHxI09ns/x79ajll-ab4J>`_ ( `修正済 <https://code.google.com/p/go/source/detail?r=8a7ac002f840>`_ ) により ``db.SetMaxOpenConns(N)`` が1.2では安全に使用できなくなります。
- コネクションは非常に早く再利用されるようになります。``db.SetMaxIdleConns(N)`` でアイドルコネクション数を高い値にしておくことはリサイクルされるチェーンが減少し、再利用のためのコネクションを保持するようになります。
- コネクションを長時間アイドル状態にしておくと問題が発生する場合があります。(`このような <https://github.com/go-sql-driver/mysql/issues/257>`_ Microsoft AzureのMySQLに関するものです。アイドル時間が長すぎることによってコネクションのタイムアウトが発生する場合、``db.SetMaxIdleConns(0)`` を試してみてください。
- ``db.SetConnMaxLifetime(duration)`` を設定することにより、コネクションを再利用できる最大時間を指定できます。これは、長時間有効なコネクションを再利用するとネットワークの問題が発生する可能性があるためです。これにより、未使用のコネクションが遅延して閉じられます。つまり、有効期限が切れた接続を閉じることが延期される場合があります。

| 前に戻る: `Working with Unknown Columns <varcols.html>`_
| 次に進む: `Surprises, Antipatterns and Limitations <surprises.html>`_
